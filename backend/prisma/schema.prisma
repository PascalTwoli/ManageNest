// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  tenant_id               Int                  @id @default(autoincrement())
  first_name              String
  last_name               String
  phone_number            String
  email                   String
  physical_address        String?
  national_id             String
  date_of_birth           DateTime
  occupation              String?
  move_in_date            DateTime
  lease_start_date        DateTime
  lease_end_date          DateTime
  monthly_rent            Decimal
  security_deposit        Decimal
  rent_due_day            Int
  status                  TenantStatus
  emergency_contact_name  String?
  emergency_contact_phone String?
  profile_photo_url       String?
  notes                   String?
  payments                Payment[]
  leases                  LeaseAgreement[]
  maintenanceRequests     MaintenanceRequest[]
  latePayments            LatePayment[]
  documents               DocumentAttachment[]
  Unit                    Unit[]
  Notification            Notification[]
  Reminder                Reminder[]
}

model Payment {
  payment_id            Int           @id @default(autoincrement())
  tenant_id             Int
  tenant                Tenant        @relation(fields: [tenant_id], references: [tenant_id])
  payment_date          DateTime
  amount_paid           Decimal
  payment_method        String
  transaction_reference String?
  payment_status        PaymentStatus
  balance_due           Decimal?
  notes                 String?
}

model LeaseAgreement {
  lease_id             Int         @id @default(autoincrement())
  tenant_id            Int
  tenant               Tenant      @relation(fields: [tenant_id], references: [tenant_id])
  lease_start_date     DateTime
  lease_end_date       DateTime
  monthly_rent         Decimal
  terms_and_conditions String
  document_url         String
  status               LeaseStatus
}

model MaintenanceRequest {
  request_id        Int           @id @default(autoincrement())
  tenant_id         Int
  tenant            Tenant        @relation(fields: [tenant_id], references: [tenant_id])
  request_date      DateTime
  issue_description String
  urgency_level     UrgencyLevel
  status            RequestStatus
  assigned_to       String?
  completion_date   DateTime?
  notes             String?
}

model Unit {
  unit_id           Int               @id @default(autoincrement())
  unit_number       String
  building_name     String
  location          String?
  unit_type         String
  monthly_rent      Decimal
  current_tenant_id Int?
  tenant            Tenant?           @relation(fields: [current_tenant_id], references: [tenant_id])
  status            UnitStatus
  expenses          PropertyExpense[]
}

model User {
  user_id         Int              @id @default(autoincrement())
  username        String
  password_hash   String
  email           String
  phone_number    String?
  role            UserRole
  last_login      DateTime?
  status          UserStatus
  transactionLogs TransactionLog[]
  reminders       Reminder[]
  Notification    Notification[]
}

model Notification {
  notification_id Int @id @default(autoincrement())

  recipient_tenant_id Int?
  recipient_tenant    Tenant? @relation(fields: [recipient_tenant_id], references: [tenant_id])

  recipient_user_id Int?
  recipient_user    User? @relation(fields: [recipient_user_id], references: [user_id])

  message   String
  date_sent DateTime
  type      NotificationType
  status    NotificationStatus
}

model TransactionLog {
  log_id         Int      @id @default(autoincrement())
  user_id        Int
  user           User     @relation(fields: [user_id], references: [user_id])
  action         String
  affected_table String
  timestamp      DateTime @default(now())
  details        String?
}

model DocumentAttachment {
  document_id   Int      @id @default(autoincrement())
  tenant_id     Int
  tenant        Tenant   @relation(fields: [tenant_id], references: [tenant_id])
  document_name String
  upload_date   DateTime
  document_url  String
  description   String?
}

model LatePayment {
  late_payment_id Int           @id @default(autoincrement())
  tenant_id       Int
  tenant          Tenant        @relation(fields: [tenant_id], references: [tenant_id])
  due_date        DateTime
  amount_due      Decimal
  late_fee        Decimal?
  payment_status  PaymentStatus
}

model Reminder {
  reminder_id Int            @id @default(autoincrement())
  user_id     Int
  user        User           @relation(fields: [user_id], references: [user_id])
  tenant_id   Int?
  tenant      Tenant?        @relation(fields: [tenant_id], references: [tenant_id])
  event_type  String
  event_date  DateTime
  status      ReminderStatus
  message     String
}

model PropertyExpense {
  expense_id   Int      @id @default(autoincrement())
  property_id  Int
  unit         Unit     @relation(fields: [property_id], references: [unit_id])
  expense_type String
  expense_date DateTime
  amount       Decimal
  vendor       String
  description  String?
}

// Enums
enum TenantStatus {
  Active
  Expired
  Pending
  Terminated
}

enum PaymentStatus {
  Paid
  Overdue
  Unpaid
}

enum LeaseStatus {
  Active
  Expired
  Terminated
}

enum UrgencyLevel {
  Low
  Medium
  High
}

enum RequestStatus {
  Submitted
  InProgress
  Completed
}

enum UnitStatus {
  Occupied
  Vacant
  UnderMaintenance
}

enum UserRole {
  Admin
  PropertyManager
}

enum UserStatus {
  Active
  Inactive
}

enum NotificationType {
  RentDue
  LeaseRenewal
  MaintenanceUpdate
}

enum NotificationStatus {
  Sent
  Read
}

enum ReminderStatus {
  Pending
  Completed
}
